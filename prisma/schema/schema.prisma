// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder", "strictUndefinedChecks", "driverAdapters"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   email     String   @unique
//   password  String
//   phone     String
//   role      Role     @default(CUSTOMER)
//   createdAt DateTime @default(now())

//   orders    Order[]
//   reviews   Review[]

//   Cart Cart[]
// }

// model Product {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   description String
//   price       Float
//   stock       Int
//   category    Category @relation(fields: [categoryId], references: [id])
//   categoryId  String   @db.ObjectId
//   images      String[] // Array of image URLs  createdAt   DateTime @default(now())

//   reviews     Review[]

//   CartItem CartItem[]

//   OrderItem OrderItem[]
// }

// model Category {
//   id        String    @id @default(auto()) @map("_id") @db.ObjectId
//   name      String    @unique
//   products  Product[]
// }

// model Cart {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
  
//   user   User   @relation(fields: [userId], references: [id])
//   userId     String   @db.ObjectId @unique
//   items      CartItem[]
//   createdAt  DateTime @default(now())
// }
// model CartItem {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   cart      Cart     @relation(fields: [cartId], references: [id])
//   cartId    String @db.ObjectId
//   product   Product  @relation(fields: [productId], references: [id])
//   productId String @db.ObjectId
//   quantity  Int
// }

// model Order {
//   id         String    @id @default(auto()) @map("_id") @db.ObjectId
//   user       User      @relation(fields: [userId], references: [id])
//   userId     String @db.ObjectId
//   items      OrderItem[]
//   total      Float
//   status     OrderStatus @default(PENDING)
//   createdAt  DateTime   @default(now())

//   payment    Payment?
// }

// model OrderItem {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   order      Order    @relation(fields: [orderId], references: [id])
//   orderId    String @db.ObjectId
//   product    Product  @relation(fields: [productId], references: [id])
//   productId  String @db.ObjectId
//   quantity   Int
//   price      Float
// }

// model Payment {
//   id         String     @id @default(auto()) @map("_id") @db.ObjectId
//   order      Order      @relation(fields: [orderId], references: [id])
//   orderId    String @db.ObjectId @unique
//   amount     Float
//   status     PaymentStatus @default(PENDING)
//   createdAt  DateTime   @default(now())
// }

// model Review {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String @db.ObjectId
//   product    Product  @relation(fields: [productId], references: [id])
//   productId  String @db.ObjectId
//   rating     Int
//   comment    String
//   createdAt  DateTime @default(now())
// }

// enum Role {
//   ADMIN
//   CUSTOMER
// }

// enum OrderStatus {
//   PENDING
//   SHIPPED
//   DELIVERED
//   CANCELLED
// }

// enum PaymentStatus {
//   PENDING
//   SUCCESS
//   FAILED
// }


